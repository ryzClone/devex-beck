const bcrypt = require("bcryptjs");
const jwt = require("jsonwebtoken");
const { User, UserHistory } = require("../models");
const logger = require("../utils/logger.js");
const { Op } = require("sequelize");

const generateToken = (user) => {
  return jwt.sign(
    { id: user.id, username: user.username, role: user.role },
    process.env.SECRET_KEY,
    { expiresIn: "1h" }
  );
};

class AuthService {
  static async login(username, password) {
    try {
      logger.info("–ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É", { username });

      if (!username || !password) {
        logger.error("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å", { username });
        return {
          status: 400,
          message: "–õ–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã",
        };
      }

      const user = await User.findOne({
        where: {
          username: {
            [Op.iLike]: username.trim(),
          },
        },
      });

      if (!user) {
        logger.error("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", { username });
        return {
          status: 404,
          message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω",
        };
      }

      if (user.status !== "active") {
        logger.error("–£—á–µ—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞", { username });
        return {
          status: 403,
          message: "–£—á–µ—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞, –¥–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.",
        };
      }

      const storedPassword = user.password;
      let isMatch = false;

      if (
        storedPassword.startsWith("$2a$") ||
        storedPassword.startsWith("$2b$")
      ) {
        isMatch = await bcrypt.compare(password, storedPassword);
      } else {
        isMatch = password === storedPassword;
      }

      if (!isMatch) {
        logger.error("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–∞—Ä–æ–ª—å", { username });
        return {
          status: 401,
          message: "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–∞—Ä–æ–ª—å",
        };
      }

      const token = generateToken(user);

      logger.info("–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥", { username });

      
      await UserHistory.create({
        user_id: user.id,
        action: "login", 
        entity_type: "user",
        entity_id: user.id,
        description: "–í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É",
        created_at: new Date(),
      });

      return {
        status: 200,
        data: {
          token,
          username: user.username,
          user_id: user.id,
          role: user.role,
        },
      };
    } catch (error) {
      console.error("üî• [ERROR] Kirishda xatolik:", error.message);
      logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ", { username, error: error.message });
      return {
        status: 500,
        message: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞",
      };
    }
  }
}

module.exports = AuthService;
