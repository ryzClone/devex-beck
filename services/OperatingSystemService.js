const { OperatingSystem, InstalledSoftware, sequelize } = require("../models");
const logger = require("../utils/logger");

// --- GET: hamma OSlarni olish (pagination + software bilan) ---
const getAllOperatingSystemsService = async ({ page, size }) => {
  try {
    const limit = parseInt(size) || 10;
    const offset = ((parseInt(page) || 1) - 1) * limit;

    const { count, rows } = await OperatingSystem.findAndCountAll({
      limit,
      offset,
      order: [["created_at", "DESC"]],
      include: [{ model: InstalledSoftware, as: "softwares" }],
    });

    logger.info(
      `[OperatingSystemService] ‚úÖ –ü–æ–ª—É—á–µ–Ω—ã –û–°. count=${count}, page=${page}, size=${size}`
    );

    return {
      success: true,
      data: rows,
      total: count,
      page: parseInt(page) || 1,
      size: limit,
      totalPages: Math.ceil(count / limit),
    };
  } catch (error) {
    logger.error(
      `[OperatingSystemService] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –û–°: ${error.message}`,
      { stack: error.stack }
    );
    return { success: false, message: error.message };
  }
};

// --- POST: OS yaratish ---
const createOperatingSystemService = async ({ name, softwares }) => {
  const t = await sequelize.transaction();
  try {
    logger.info(`[OperatingSystemService] üü¢ –°–æ–∑–¥–∞–Ω–∏–µ –û–°: name='${name}', softwares=${JSON.stringify(softwares)}`);

    const existing = await OperatingSystem.findOne({ where: { name }, transaction: t });
    if (existing) {
      const msg = `–í –±–∞–∑–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ '${name}'`;
      logger.warn(`[OperatingSystemService] ‚ö†Ô∏è ${msg}`);
      await t.rollback();
      return { success: false, message: msg };
    }

    const newOS = await OperatingSystem.create({ name }, { transaction: t });
    logger.info(`[OperatingSystemService] üü¢ –û–° —Å–æ–∑–¥–∞–Ω–∞: ${JSON.stringify(newOS)}`);

    if (Array.isArray(softwares) && softwares.length > 0) {
      const validSoftwares = await InstalledSoftware.findAll({
        where: { id: softwares },
        transaction: t,
      });
      if (validSoftwares.length !== softwares.length) {
        logger.warn(`[OperatingSystemService] ‚ö†Ô∏è –ù–µ –≤—Å–µ softwares –Ω–∞–π–¥–µ–Ω—ã. Requested: ${softwares}, Found: ${validSoftwares.map(s => s.id)}`);
      }
      await newOS.addSoftwares(validSoftwares, { transaction: t });
      logger.info(`[OperatingSystemService] üü¢ –î–æ–±–∞–≤–ª–µ–Ω—ã softwares –∫ –û–°: ${validSoftwares.map(s => s.id)}`);
    }

    await t.commit();
    logger.info(`[OperatingSystemService] ‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è commit —É—Å–ø–µ—à–Ω–∞. –û–° —Å–æ–∑–¥–∞–Ω–∞ —Å ID=${newOS.id}`);
    return { success: true, data: newOS };
  } catch (error) {
    await t.rollback();
    logger.error(
      `[OperatingSystemService] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –û–°: ${error.message}`,
      { stack: error.stack }
    );
    return { success: false, message: error.message };
  }
};

// --- PUT: OS yangilash ---
const updateOperatingSystemService = async (id, { name, softwares }) => {
  const t = await sequelize.transaction();
  try {
    logger.info(`[OperatingSystemService] üü¢ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –û–° ID=${id}, name='${name}', softwares=${JSON.stringify(softwares)}`);

    const os = await OperatingSystem.findByPk(id, { transaction: t });
    if (!os) {
      const msg = `–û–° —Å ID=${id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`;
      logger.warn(`[OperatingSystemService] ‚ö†Ô∏è ${msg}`);
      await t.rollback();
      return { success: false, message: msg };
    }

    if (name) {
      await os.update({ name }, { transaction: t });
      logger.info(`[OperatingSystemService] üü¢ –û–±–Ω–æ–≤–ª–µ–Ω–æ name –û–° ID=${id} => ${name}`);
    }

    if (Array.isArray(softwares)) {
      const validSoftwares = await InstalledSoftware.findAll({
        where: { id: softwares },
        transaction: t,
      });
      await os.setSoftwares(validSoftwares, { transaction: t });
      logger.info(`[OperatingSystemService] üü¢ –û–±–Ω–æ–≤–ª–µ–Ω—ã softwares –¥–ª—è –û–° ID=${id} => ${validSoftwares.map(s => s.id)}`);
    }

    await t.commit();
    logger.info(`[OperatingSystemService] ‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è commit —É—Å–ø–µ—à–Ω–∞. –û–° ID=${id} –æ–±–Ω–æ–≤–ª–µ–Ω–∞`);
    return { success: true, message: "–û–° —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞", data: os };
  } catch (error) {
    await t.rollback();
    logger.error(
      `[OperatingSystemService] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –û–° (ID=${id}): ${error.message}`,
      { stack: error.stack }
    );
    return { success: false, message: error.message };
  }
};

// --- DELETE: OS o‚Äòchirish ---
const deleteOperatingSystemService = async (id) => {
  const t = await sequelize.transaction();
  try {
    logger.info(`[OperatingSystemService] üü¢ –£–¥–∞–ª–µ–Ω–∏–µ –û–° ID=${id}`);
    const os = await OperatingSystem.findByPk(id, {
      include: [{ model: InstalledSoftware, as: "softwares" }],
      transaction: t,
    });

    if (!os) {
      const msg = `–û–° —Å ID=${id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`;
      logger.warn(`[OperatingSystemService] ‚ö†Ô∏è ${msg}`);
      await t.rollback();
      return { success: false, message: msg };
    }

    await os.setSoftwares([], { transaction: t });
    await os.destroy({ transaction: t });

    await t.commit();
    const msg = `–û–° —Å ID=${id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞`;
    logger.info(`[OperatingSystemService] ‚úÖ ${msg}`);
    return { success: true, message: msg };
  } catch (error) {
    await t.rollback();
    logger.error(
      `[OperatingSystemService] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –û–° (ID=${id}): ${error.message}`,
      { stack: error.stack }
    );
    return { success: false, message: error.message };
  }
};

module.exports = {
  getAllOperatingSystemsService,
  createOperatingSystemService,
  updateOperatingSystemService,
  deleteOperatingSystemService,
};
